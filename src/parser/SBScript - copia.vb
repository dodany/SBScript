'Generated by the GOLD Parser Builder

Option Explicit On
Option Strict Off

Imports System.IO
Imports System.Windows.Forms


Module MyParser
    Private Parser As New GOLD.Parser

    Private Enum SymbolIndex
        [Eof] = 0                                 ' (EOF)
        [Error] = 1                               ' (Error)
        [Comment] = 2                             ' Comment
        [Whitespace] = 3                          ' Whitespace
        [Num] = 4                                 ' '#'
        [Numtimes] = 5                            ' '#*'
        [Timesnum] = 6                            ' '*#'
        [Minus] = 7                               ' '-'
        [Minusminus] = 8                          ' '--'
        [Exclam] = 9                              ' '!'
        [Exclamamp] = 10                          ' '!&'
        [Exclameq] = 11                           ' '!='
        [Percent] = 12                            ' '%'
        [Ampamp] = 13                             ' '&&'
        [Lparen] = 14                             ' '('
        [Rparen] = 15                             ' ')'
        [Times] = 16                              ' '*'
        [Comma] = 17                              ' ','
        [Div] = 18                                ' '/'
        [Colon] = 19                              ' ':'
        [Semi] = 20                               ' ';'
        [Caret] = 21                              ' '^'
        [Lbrace] = 22                             ' '{'
        [Pipepipe] = 23                           ' '||'
        [Rbrace] = 24                             ' '}'
        [Tilde] = 25                              ' '~'
        [Plus] = 26                               ' '+'
        [Plusplus] = 27                           ' '++'
        [Lt] = 28                                 ' '<'
        [Lteq] = 29                               ' '<='
        [Eq] = 30                                 ' '='
        [Eqeq] = 31                               ' '=='
        [Gt] = 32                                 ' '>'
        [Gteq] = 33                               ' '>='
        [Boolean] = 34                            ' BOOLEAN
        [Continuar] = 35                          ' CONTINUAR
        [Defecto] = 36                            ' DEFECTO
        [Define] = 37                             ' DEFINE
        [Detener] = 38                            ' DETENER
        [Dibujarast] = 39                         ' DIBUJARAST
        [Dibujarexp] = 40                         ' DIBUJAREXP
        [False] = 41                              ' FALSE
        [File] = 42                               ' FILE
        [Float] = 43                              ' FLOAT
        [Hasta] = 44                              ' HASTA
        [Id] = 45                                 ' ID
        [Incluye] = 46                            ' INCLUYE
        [Mientras] = 47                           ' MIENTRAS
        [Mostrar] = 48                            ' MOSTRAR
        [Newline] = 49                            ' NewLine
        [Num2] = 50                               ' NUM
        [Number] = 51                             ' NUMBER
        [Para] = 52                               ' PARA
        [Return] = 53                             ' RETURN
        [Selecciona] = 54                         ' SELECCIONA
        [Si] = 55                                 ' SI
        [Sino] = 56                               ' SINO
        [Str] = 57                                ' STR
        [String] = 58                             ' STRING
        [True] = 59                               ' TRUE
        [Void] = 60                               ' VOID
        [Addexp] = 61                             ' <Add Exp>
        [Andexp] = 62                             ' <And Exp>
        [Arglist] = 63                            ' <Arg List>
        [Assign] = 64                             ' <Assign>
        [Case] = 65                               ' <Case>
        [Caselist] = 66                           ' <Case List>
        [Define2] = 67                            ' <Define>
        [Definelist] = 68                         ' <DefineList>
        [Definevalue] = 69                        ' <DefineValue>
        [Expression] = 70                         ' <Expression>
        [Globaldec] = 71                          ' <Global Dec>
        [Hastastmt] = 72                          ' <Hasta Stmt>
        [Header] = 73                             ' <Header>
        [Ifstmt] = 74                             ' <If Stmt>
        [Incluye2] = 75                           ' <Incluye>
        [Incluyelist] = 76                        ' <IncluyeList>
        [Instruction] = 77                        ' <Instruction>
        [Instructions] = 78                       ' <Instructions>
        [Listid] = 79                             ' <List ID>
        [Methodcall] = 80                         ' <Method Call>
        [Methoddec] = 81                          ' <Method Dec>
        [Mientrasstmt] = 82                       ' <Mientras Stmt>
        [Multexp] = 83                            ' <Mult Exp>
        [Negateexp] = 84                          ' <Negate Exp>
        [Nl] = 85                                 ' <nl>
        [Nlopt] = 86                              ' <nl Opt>
        [Notexp] = 87                             ' <Not Exp>
        [Orexp] = 88                              ' <Or Exp>
        [Paraop] = 89                             ' <Para Op>
        [Parastmt] = 90                           ' <Para Stmt>
        [Paramlist] = 91                          ' <Param List>
        [Powexp] = 92                             ' <Pow Exp>
        [Program] = 93                            ' <Program>
        [Return2] = 94                            ' <Return>
        [Selectdef] = 95                          ' <Select Def>
        [Selectstmt] = 96                         ' <Select Stmt>
        [Selectvalue] = 97                        ' <Select Value>
        [Start] = 98                              ' <Start>
        [Type] = 99                               ' <Type>
        [Value] = 100                             ' <Value>
        [Vardec] = 101                            ' <Var Dec>
        [Xorexp] = 102                            ' <Xor Exp>
    End Enum

    Private Enum ProductionIndex
        [Nl_Newline] = 0                          ' <nl> ::= NewLine <nl>
        [Nl_Newline2] = 1                         ' <nl> ::= NewLine
        [Nlopt_Newline] = 2                       ' <nl Opt> ::= NewLine <nl Opt>
        [Nlopt] = 3                               ' <nl Opt> ::= 
        [Start] = 4                               ' <Start> ::= <nl Opt> <Program>
        [Program] = 5                             ' <Program> ::= <Header> <Global Dec> <nl Opt>
        [Program2] = 6                            ' <Program> ::= <Global Dec> <nl Opt>
        [Program3] = 7                            ' <Program> ::= 
        [Header] = 8                              ' <Header> ::= <IncluyeList> <DefineList>
        [Header2] = 9                             ' <Header> ::= <DefineList>
        [Incluyelist] = 10                        ' <IncluyeList> ::= <IncluyeList> <Incluye>
        [Incluyelist2] = 11                       ' <IncluyeList> ::= <Incluye>
        [Definelist] = 12                         ' <DefineList> ::= <DefineList> <Define>
        [Definelist2] = 13                        ' <DefineList> ::= <Define>
        [Incluye_Incluye_File] = 14               ' <Incluye> ::= INCLUYE FILE <nl>
        [Define_Define] = 15                      ' <Define> ::= DEFINE <DefineValue> <nl>
        [Definevalue_Num] = 16                    ' <DefineValue> ::= NUM
        [Definevalue_Str] = 17                    ' <DefineValue> ::= STR
        [Definevalue_Float] = 18                  ' <DefineValue> ::= FLOAT
        [Globaldec] = 19                          ' <Global Dec> ::= <Var Dec> <Global Dec>
        [Globaldec2] = 20                         ' <Global Dec> ::= <Method Dec> <Global Dec>
        [Globaldec3] = 21                         ' <Global Dec> ::= <Var Dec>
        [Globaldec4] = 22                         ' <Global Dec> ::= <Method Dec>
        [Vardec_Eq_Semi] = 23                     ' <Var Dec> ::= <Type> <List ID> '=' <Expression> ';' <nl Opt>
        [Vardec_Semi] = 24                        ' <Var Dec> ::= <Type> <List ID> ';' <nl Opt>
        [Listid_Id_Comma] = 25                    ' <List ID> ::= ID ',' <List ID>
        [Listid_Id] = 26                          ' <List ID> ::= ID
        [Type_Number] = 27                        ' <Type> ::= NUMBER
        [Type_Boolean] = 28                       ' <Type> ::= BOOLEAN
        [Type_String] = 29                        ' <Type> ::= STRING
        [Methoddec_Void_Id_Lparen_Rparen_Lbrace_Rbrace] = 30 ' <Method Dec> ::= VOID ID '(' <Arg List> ')' '{' <Instructions> '}' <nl Opt>
        [Methoddec_Id_Lparen_Rparen_Lbrace_Rbrace] = 31 ' <Method Dec> ::= <Type> ID '(' <Arg List> ')' '{' <Instructions> '}' <nl Opt>
        [Methoddec_Id_Lparen_Rparen_Lbrace_Rbrace2] = 32 ' <Method Dec> ::= ID '(' <Arg List> ')' '{' <Instructions> '}' <nl Opt>
        [Arglist_Id_Comma] = 33                   ' <Arg List> ::= <Type> ID ',' <nl Opt> <Arg List>
        [Arglist_Id] = 34                         ' <Arg List> ::= <Type> ID
        [Arglist] = 35                            ' <Arg List> ::= 
        [Instructions] = 36                       ' <Instructions> ::= <Instructions> <Instruction>
        [Instructions2] = 37                      ' <Instructions> ::= <Instruction>
        [Instruction] = 38                        ' <Instruction> ::= <Var Dec>
        [Instruction2] = 39                       ' <Instruction> ::= <Assign>
        [Instruction3] = 40                       ' <Instruction> ::= <Method Call>
        [Instruction4] = 41                       ' <Instruction> ::= <Return>
        [Instruction5] = 42                       ' <Instruction> ::= <If Stmt>
        [Instruction6] = 43                       ' <Instruction> ::= <Select Stmt>
        [Instruction7] = 44                       ' <Instruction> ::= <Para Stmt>
        [Instruction8] = 45                       ' <Instruction> ::= <Hasta Stmt>
        [Instruction9] = 46                       ' <Instruction> ::= <Mientras Stmt>
        [Instruction_Detener_Semi] = 47           ' <Instruction> ::= DETENER ';' <nl Opt>
        [Instruction_Continuar_Semi] = 48         ' <Instruction> ::= CONTINUAR ';' <nl Opt>
        [Instruction10] = 49                      ' <Instruction> ::= <nl Opt>
        [Assign_Id_Eq_Semi] = 50                  ' <Assign> ::= ID '=' <Expression> ';'
        [Methodcall_Mostrar_Lparen_Rparen_Semi] = 51 ' <Method Call> ::= MOSTRAR '(' <Param List> ')' ';' <nl Opt>
        [Methodcall_Dibujarast_Lparen_Rparen_Semi] = 52 ' <Method Call> ::= DIBUJARAST '(' <Param List> ')' ';' <nl Opt>
        [Methodcall_Dibujarexp_Lparen_Rparen_Semi] = 53 ' <Method Call> ::= DIBUJAREXP '(' <Param List> ')' ';' <nl Opt>
        [Methodcall_Id_Lparen_Rparen_Semi] = 54   ' <Method Call> ::= ID '(' <Param List> ')' ';' <nl Opt>
        [Return_Return_Semi] = 55                 ' <Return> ::= RETURN <Expression> ';' <nl Opt>
        [Return_Return_Semi2] = 56                ' <Return> ::= RETURN ';' <nl Opt>
        [Ifstmt_Si_Lparen_Rparen_Lbrace_Rbrace_Sino_Lbrace_Rbrace] = 57 ' <If Stmt> ::= SI '(' <Expression> ')' <nl Opt> '{' <Instructions> '}' <nl Opt> SINO <nl Opt> '{' <Instructions> '}' <nl Opt>
        [Ifstmt_Si_Lparen_Rparen_Lbrace_Rbrace] = 58 ' <If Stmt> ::= SI '(' <Expression> ')' <nl Opt> '{' <Instructions> '}' <nl Opt>
        [Selectstmt_Selecciona_Lparen_Rparen] = 59 ' <Select Stmt> ::= SELECCIONA '(' <Expression> ')' <nl Opt> <Case List> <Select Def>
        [Caselist] = 60                           ' <Case List> ::= <Case> <Case List>
        [Caselist2] = 61                          ' <Case List> ::= <Case>
        [Case_Colon_Lbrace_Rbrace] = 62           ' <Case> ::= <Select Value> ':' '{' <Instructions> '}' <nl Opt>
        [Selectdef_Defecto_Colon_Lbrace_Rbrace] = 63 ' <Select Def> ::= DEFECTO ':' '{' <Instructions> '}' <nl Opt>
        [Selectdef] = 64                          ' <Select Def> ::= 
        [Parastmt_Para_Lparen_Number_Id_Eq_Semi_Semi_Rparen_Lbrace_Rbrace] = 65 ' <Para Stmt> ::= PARA '(' NUMBER ID '=' <Expression> ';' <Expression> ';' <Para Op> ')' '{' <Instructions> '}' <nl Opt>
        [Paraop_Plusplus] = 66                    ' <Para Op> ::= '++'
        [Paraop_Minusminus] = 67                  ' <Para Op> ::= '--'
        [Hastastmt_Hasta_Lparen_Rparen_Lbrace_Rbrace] = 68 ' <Hasta Stmt> ::= HASTA '(' <Expression> ')' '{' <Instructions> '}' <nl Opt>
        [Mientrasstmt_Mientras_Lparen_Rparen_Lbrace_Rbrace] = 69 ' <Mientras Stmt> ::= MIENTRAS '(' <Expression> ')' '{' <Instructions> '}' <nl Opt>
        [Selectvalue_Num] = 70                    ' <Select Value> ::= NUM
        [Selectvalue_Float] = 71                  ' <Select Value> ::= FLOAT
        [Selectvalue_Str] = 72                    ' <Select Value> ::= STR
        [Expression_Gt] = 73                      ' <Expression> ::= <Expression> '>' <Or Exp>
        [Expression_Lt] = 74                      ' <Expression> ::= <Expression> '<' <Or Exp>
        [Expression_Lteq] = 75                    ' <Expression> ::= <Expression> '<=' <Or Exp>
        [Expression_Gteq] = 76                    ' <Expression> ::= <Expression> '>=' <Or Exp>
        [Expression_Eqeq] = 77                    ' <Expression> ::= <Expression> '==' <Or Exp>
        [Expression_Exclameq] = 78                ' <Expression> ::= <Expression> '!=' <Or Exp>
        [Expression_Tilde] = 79                   ' <Expression> ::= <Expression> '~' <Or Exp>
        [Expression] = 80                         ' <Expression> ::= <Or Exp>
        [Orexp_Pipepipe] = 81                     ' <Or Exp> ::= <Or Exp> '||' <Xor Exp>
        [Orexp] = 82                              ' <Or Exp> ::= <Xor Exp>
        [Xorexp_Exclamamp] = 83                   ' <Xor Exp> ::= <Xor Exp> '!&' <And Exp>
        [Xorexp] = 84                             ' <Xor Exp> ::= <And Exp>
        [Andexp_Ampamp] = 85                      ' <And Exp> ::= <And Exp> '&&' <Not Exp>
        [Andexp] = 86                             ' <And Exp> ::= <Not Exp>
        [Notexp_Exclam] = 87                      ' <Not Exp> ::= '!' <Add Exp>
        [Notexp] = 88                             ' <Not Exp> ::= <Add Exp>
        [Addexp_Plus] = 89                        ' <Add Exp> ::= <Add Exp> '+' <Mult Exp>
        [Addexp_Minus] = 90                       ' <Add Exp> ::= <Add Exp> '-' <Mult Exp>
        [Addexp] = 91                             ' <Add Exp> ::= <Mult Exp>
        [Multexp_Times] = 92                      ' <Mult Exp> ::= <Mult Exp> '*' <Pow Exp>
        [Multexp_Div] = 93                        ' <Mult Exp> ::= <Mult Exp> '/' <Pow Exp>
        [Multexp_Percent] = 94                    ' <Mult Exp> ::= <Mult Exp> '%' <Pow Exp>
        [Multexp] = 95                            ' <Mult Exp> ::= <Pow Exp>
        [Powexp_Caret] = 96                       ' <Pow Exp> ::= <Pow Exp> '^' <Negate Exp>
        [Powexp] = 97                             ' <Pow Exp> ::= <Negate Exp>
        [Negateexp_Minus] = 98                    ' <Negate Exp> ::= '-' <Value>
        [Negateexp] = 99                          ' <Negate Exp> ::= <Value>
        [Value_Id_Lparen_Rparen] = 100            ' <Value> ::= ID '(' <Param List> ')'
        [Value_Id] = 101                          ' <Value> ::= ID
        [Value_Lparen_Rparen] = 102               ' <Value> ::= '(' <Expression> ')'
        [Value_Num] = 103                         ' <Value> ::= NUM
        [Value_Float] = 104                       ' <Value> ::= FLOAT
        [Value_Str] = 105                         ' <Value> ::= STR
        [Value_True] = 106                        ' <Value> ::= TRUE
        [Value_False] = 107                       ' <Value> ::= FALSE
        [Paramlist_Comma] = 108                   ' <Param List> ::= <Expression> ',' <nl Opt> <Param List>
        [Paramlist] = 109                         ' <Param List> ::= <Expression>
        [Paramlist2] = 110                        ' <Param List> ::= 
    End Enum

    Public Program As Object     'You might derive a specific object

    Public Sub Setup()
        'This procedure can be called to load the parse tables. The class can
        'read tables using a BinaryReader.

        Parser.LoadTables(Path.Combine(Application.StartupPath, "SBScript.egt"))
    End Sub

    Public Function Parse(ByVal Reader As TextReader) As Boolean
        'This procedure starts the GOLD Parser Engine and handles each of the
        'messages it returns. Each time a reduction is made, you can create new
        'custom object and reassign the .CurrentReduction property. Otherwise, 
        'the system will use the Reduction object that was returned.
        '
        'The resulting tree will be a pure representation of the language 
        'and will be ready to implement.

        Dim Response As GOLD.ParseMessage
        Dim Done As Boolean                  'Controls when we leave the loop
        Dim Accepted As Boolean = False      'Was the parse successful?

        Accepted = False    'Unless the program is accepted by the parser

        Parser.Open(Reader)
        Parser.TrimReductions = False  'Please read about this feature before enabling  

        Done = False
        Do Until Done
            Response = Parser.Parse()

            Select Case Response
                Case GOLD.ParseMessage.LexicalError
                    'Cannot recognize token
                    Done = True

                Case GOLD.ParseMessage.SyntaxError
                    'Expecting a different token
                    Done = True

                Case GOLD.ParseMessage.Reduction
                    'Create a customized object to store the reduction
                    Parser.CurrentReduction = CreateNewObject(Parser.CurrentReduction)

                Case GOLD.ParseMessage.Accept
                    'Accepted!
                    'Program = Parser.CurrentReduction  'The root node!                 
                    Done = True
                    Accepted = True

                Case GOLD.ParseMessage.TokenRead
                    'You don't have to do anything here.

                Case GOLD.ParseMessage.InternalError
                    'INTERNAL ERROR! Something is horribly wrong.
                    Done = True

                Case GOLD.ParseMessage.NotLoadedError
                    'This error occurs if the CGT was not loaded.                   
                    Done = True

                Case GOLD.ParseMessage.GroupError
                    'COMMENT ERROR! Unexpected end of file
                    Done = True
            End Select
        Loop

        Return Accepted
    End Function

    Private Function CreateNewObject(Reduction As GOLD.Reduction) As Object
        Dim Result As Object = Nothing

        With Reduction
            Select Case .Parent.TableIndex
                Case ProductionIndex.Nl_Newline
                    ' <nl> ::= NewLine <nl> 

                Case ProductionIndex.Nl_Newline2
                    ' <nl> ::= NewLine 

                Case ProductionIndex.Nlopt_Newline
                    ' <nl Opt> ::= NewLine <nl Opt> 

                Case ProductionIndex.Nlopt
                    ' <nl Opt> ::=  

                Case ProductionIndex.Start
                    ' <Start> ::= <nl Opt> <Program> 
                    ''Ejecuta Program
                    Dim p = CType(.Item(1).Data, Program)
                    p.Execute()
                    Return Nothing

                Case ProductionIndex.Program
                    ' <Program> ::= <Header> <Global Dec> <nl Opt> 
                    Return New Program(.Item(0).Data, .Item(1).Data)

                Case ProductionIndex.Program2
                    ' <Program> ::= <Global Dec> <nl Opt> 
                    Return New Program(Nothing, .Item(0).Data)

                Case ProductionIndex.Program3
                    ' <Program> ::=  
                    Return Nothing

                Case ProductionIndex.Header
                    ' <Header> ::= <IncluyeList> <DefineList> 
                    Return New Header(.Item(0).Data, .Item(1).Data)

                Case ProductionIndex.Header2
                    ' <Header> ::= <DefineList> 
                    Dim s = New Stack(Of Node)
                    s.Push(.Item(0).Data)
                    Return s

                Case ProductionIndex.Incluyelist
                    ' <IncluyeList> ::= <IncluyeList> <Incluye> 
                    Dim s = CType(.Item(0).Data, Stack(Of Node))
                    s.Push(.Item(0).Data)
                    Return s

                Case ProductionIndex.Incluyelist2
                    ' <IncluyeList> ::= <Incluye> 
                    Dim s = New Stack(Of Node)
                    s.Push(.Item(0).Data)
                    Return s

                Case ProductionIndex.Definelist
                    ' <DefineList> ::= <DefineList> <Define> 
                    Dim s = CType(.Item(0).Data, Stack(Of Node))
                    s.Push(.Item(1).Data)
                    Return s

                Case ProductionIndex.Definelist2
                    ' <DefineList> ::= <Define> 
                    Dim s = New Stack(Of Node)
                    s.Push(.Item(0).Data)
                    Return s

                Case ProductionIndex.Incluye_Incluye_File
                    ' <Incluye> ::= INCLUYE FILE <nl> 
                    Return New Incluye(CType(.Item(1).Data, String))

                Case ProductionIndex.Define_Define
                    ' <Define> ::= DEFINE <DefineValue> <nl> 
                    Return New Define(.Item(1).Data)

                Case ProductionIndex.Definevalue_Num
                    ' <DefineValue> ::= NUM 
                    Return CType(.Item(0).Data, Decimal)

                Case ProductionIndex.Definevalue_Str
                    ' <DefineValue> ::= STR 
                    Return CType(.Item(0).Data, String).Replace("""", "")

                Case ProductionIndex.Definevalue_Float
                    ' <DefineValue> ::= FLOAT 
                    Return CType(.Item(0).Data, Decimal)

                Case ProductionIndex.Globaldec
                    ' <Global Dec> ::= <Var Dec> <Global Dec> 
                    Dim s = CType(.Item(1).Data, Stack(Of Node))
                    s.Push(.Item(0).Data)
                    Return s

                Case ProductionIndex.Globaldec2
                    ' <Global Dec> ::= <Method Dec> <Global Dec> 
                    Dim s = CType(.Item(1).Data, Stack(Of Node))
                    s.Push(.Item(0).Data)
                    Return s

                Case ProductionIndex.Globaldec3
                    ' <Global Dec> ::= <Var Dec> 
                    Dim s = New Stack(Of Node)
                    s.Push(.Item(0).Data)
                    Return s

                Case ProductionIndex.Globaldec4
                    ' <Global Dec> ::= <Method Dec> 
                    Dim s = New Stack(Of Node)
                    s.Push(.Item(0).Data)
                    Return s

                Case ProductionIndex.Vardec_Eq_Semi
                    ' <Var Dec> ::= <Type> <List ID> '=' <Expression> ';' <nl Opt> 
                    Return New DeclareVar(CType(.Item(1).Data, Stack(Of String)), .Item(0).Data, .Item(3).Data)

                Case ProductionIndex.Vardec_Semi
                    ' <Var Dec> ::= <Type> <List ID> ';' <nl Opt> 
                    Return New DeclareVar(CType(.Item(1).Data, Stack(Of String)), .Item(0).Data, Nothing)

                Case ProductionIndex.Listid_Id_Comma
                    ' <List ID> ::= ID ',' <List ID> 
                    Dim s = CType(.Item(2).Data, Stack(Of String))
                    s.Push(CType(.Item(0).Data, String))
                    Return s

                Case ProductionIndex.Listid_Id
                    ' <List ID> ::= ID 
                    Dim s = New Stack(Of String)
                    s.Push(CType(.Item(0).Data, String))
                    Return s

                Case ProductionIndex.Type_Number
                    ' <Type> ::= NUMBER 
                    Return Symbol.TypeEnum.NUMBERTYPE

                Case ProductionIndex.Type_Boolean
                    ' <Type> ::= BOOLEAN 
                    Return Symbol.TypeEnum.BOOLEANTYPE

                Case ProductionIndex.Type_String
                    ' <Type> ::= STRING 
                    Return Symbol.TypeEnum.STRINGTYPE

                Case ProductionIndex.Methoddec_Void_Id_Lparen_Rparen_Lbrace_Rbrace
                    ' <Method Dec> ::= VOID ID '(' <Arg List> ')' '{' <Instructions> '}' <nl Opt> 
                    Return New DeclareMethod(CType(.Item(1).Data, String), Symbol.TypeEnum.VOIDTYPE, .Item(3).Data, .Item(6).Data)

                Case ProductionIndex.Methoddec_Id_Lparen_Rparen_Lbrace_Rbrace
                    ' <Method Dec> ::= <Type> ID '(' <Arg List> ')' '{' <Instructions> '}' <nl Opt> 
                    Return New DeclareMethod(CType(.Item(1).Data, String), .Item(0).Data, .Item(3).Data, .Item(6).Data)

                Case ProductionIndex.Methoddec_Id_Lparen_Rparen_Lbrace_Rbrace2
                    ' <Method Dec> ::= ID '(' <Arg List> ')' '{' <Instructions> '}' <nl Opt> 
                    Return New DeclareMethod(CType(.Item(0).Data, String), Symbol.TypeEnum.VOIDTYPE, .Item(2).Data, .Item(5).Data)

                Case ProductionIndex.Arglist_Id_Comma
                    ' <Arg List> ::= <Type> ID ',' <nl Opt> <Arg List> 
                    Dim st = CType(.Item(4).Data, Stack(Of Symbol))
                    st.Push(New Symbol(CType(.Item(1).Data, String), .Item(0).Data))
                    Return st

                Case ProductionIndex.Arglist_Id
                    ' <Arg List> ::= <Type> ID 
                    Dim st = New Stack(Of Symbol)
                    st.Push(New Symbol(CType(.Item(1).Data, String), .Item(0).Data))
                    Return st

                Case ProductionIndex.Arglist
                    ' <Arg List> ::=  
                    Return New Stack(Of Symbol)

                Case ProductionIndex.Instructions
                    ' <Instructions> ::= <Instructions> <Instruction> 
                    Dim s = CType(.Item(0).Data, Queue(Of Node))
                    Dim n = .Item(1).Data
                    If n IsNot Nothing Then
                        s.Enqueue(n)
                    End If
                    Return s

                Case ProductionIndex.Instructions2
                    ' <Instructions> ::= <Instruction> 
                    Dim s = New Queue(Of Node)
                    Dim n = .Item(0).Data
                    If n IsNot Nothing Then
                        s.Enqueue(n)
                    End If
                    Return s

                Case ProductionIndex.Instruction
                    ' <Instruction> ::= <Var Dec> 
                    Return .Item(0).Data

                Case ProductionIndex.Instruction2
                    ' <Instruction> ::= <Assign> 
                    Return .Item(0).Data

                Case ProductionIndex.Instruction3
                    ' <Instruction> ::= <Method Call> 
                    Return .Item(0).Data

                Case ProductionIndex.Instruction4
                    ' <Instruction> ::= <Return> 
                    Return .Item(0).Data

                Case ProductionIndex.Instruction5
                    ' <Instruction> ::= <If Stmt> 
                    Return .Item(0).Data

                Case ProductionIndex.Instruction6
                    ' <Instruction> ::= <Select Stmt> 
                    Return .Item(0).Data

                Case ProductionIndex.Instruction7
                    ' <Instruction> ::= <Para Stmt> 
                    Return .Item(0).Data

                Case ProductionIndex.Instruction8
                    ' <Instruction> ::= <Hasta Stmt> 
                    Return .Item(0).Data

                Case ProductionIndex.Instruction9
                    ' <Instruction> ::= <Mientras Stmt> 
                    Return .Item(0).Data

                Case ProductionIndex.Instruction_Detener_Semi
                    ' <Instruction> ::= DETENER ';' <nl Opt> 
                    Return New Detener()

                Case ProductionIndex.Instruction_Continuar_Semi
                    ' <Instruction> ::= CONTINUAR ';' <nl Opt> 
                    Return New Continuar()

                Case ProductionIndex.Instruction10
                    ' <Instruction> ::= <nl Opt> 
                    Return Nothing

                Case ProductionIndex.Assign_Id_Eq_Semi
                    ' <Assign> ::= ID '=' <Expression> ';' 
                    Return New AssignNode(CType(.Item(0).Data, String), .Item(2).Data)

                Case ProductionIndex.Methodcall_Mostrar_Lparen_Rparen_Semi
                    ' <Method Call> ::= MOSTRAR '(' <Param List> ')' ';' <nl Opt> 
                    Return New MethodCall("Mostrar", .Item(2).Data)

                Case ProductionIndex.Methodcall_Dibujarast_Lparen_Rparen_Semi
                    ' <Method Call> ::= DIBUJARAST '(' <Param List> ')' ';' <nl Opt> 
                    Return New MethodCall("DibujarAST", .Item(2).Data)

                Case ProductionIndex.Methodcall_Dibujarexp_Lparen_Rparen_Semi
                    ' <Method Call> ::= DIBUJAREXP '(' <Param List> ')' ';' <nl Opt> 
                    Return New MethodCall("DibujarEXP", .Item(2).Data)

                Case ProductionIndex.Methodcall_Id_Lparen_Rparen_Semi
                    ' <Method Call> ::= ID '(' <Param List> ')' ';' <nl Opt> 
                    Return New MethodCall(CType(.Item(0).Data, String), .Item(2).Data)

                Case ProductionIndex.Return_Return_Semi
                    ' <Return> ::= RETURN <Expression> ';' <nl Opt> 
                    Return New ReturnNode(.Item(1).Data)

                Case ProductionIndex.Return_Return_Semi2
                    ' <Return> ::= RETURN ';' <nl Opt> 
                    Return New ReturnNode(Nothing)

                Case ProductionIndex.Ifstmt_Si_Lparen_Rparen_Lbrace_Rbrace_Sino_Lbrace_Rbrace
                    ' <If Stmt> ::= SI '(' <Expression> ')' <nl Opt> '{' <Instructions> '}' <nl Opt> SINO <nl Opt> '{' <Instructions> '}' <nl Opt> 
                    Return New IfNode(.Item(2).Data, .Item(6).Data, .Item(12).Data)

                Case ProductionIndex.Ifstmt_Si_Lparen_Rparen_Lbrace_Rbrace
                    ' <If Stmt> ::= SI '(' <Expression> ')' <nl Opt> '{' <Instructions> '}' <nl Opt> 
                    Return New IfNode(.Item(2).Data, .Item(6).Data, Nothing)

                Case ProductionIndex.Selectstmt_Selecciona_Lparen_Rparen
                    ' <Select Stmt> ::= SELECCIONA '(' <Expression> ')' <nl Opt> <Case List> <Select Def> 
                    Return New Selecciona(.Item(2).Data, .Item(5).Data, .Item(6).Data)

                Case ProductionIndex.Caselist
                    ' <Case List> ::= <Case> <Case List> 
                    Dim s = CType(.Item(1).Data, Stack(Of CaseNode))
                    s.Push(.Item(0).Data)
                    Return s

                Case ProductionIndex.Caselist2
                    ' <Case List> ::= <Case> 
                    Dim s As New Stack(Of CaseNode)
                    s.Push(.Item(0).Data)
                    Return s

                Case ProductionIndex.Case_Colon_Lbrace_Rbrace
                    ' <Case> ::= <Select Value> ':' '{' <Instructions> '}' <nl Opt> 
                    Return New CaseNode(.Item(0).Data, .Item(3).Data)

                Case ProductionIndex.Selectdef_Defecto_Colon_Lbrace_Rbrace
                    ' <Select Def> ::= DEFECTO ':' '{' <Instructions> '}' <nl Opt> 
                    Return New CaseNode(Nothing, .Item(3).Data)

                Case ProductionIndex.Selectdef
                    ' <Select Def> ::=  
                    Return Nothing

                Case ProductionIndex.Parastmt_Para_Lparen_Number_Id_Eq_Semi_Semi_Rparen_Lbrace_Rbrace
                    ' <Para Stmt> ::= PARA '(' NUMBER ID '=' <Expression> ';' <Expression> ';' <Para Op> ')' '{' <Instructions> '}' <nl Opt> 
                    Return New Para(New DeclareVar(CType(.Item(3).Data, String), Symbol.TypeEnum.NUMBERTYPE, .Item(5).Data), .Item(7).Data, .Item(12).Data, .Item(9).Data)

                Case ProductionIndex.Paraop_Plusplus
                    ' <Para Op> ::= '++' 
                    Return "++"

                Case ProductionIndex.Paraop_Minusminus
                    ' <Para Op> ::= '--' 
                    Return "--"

                Case ProductionIndex.Hastastmt_Hasta_Lparen_Rparen_Lbrace_Rbrace
                    ' <Hasta Stmt> ::= HASTA '(' <Expression> ')' '{' <Instructions> '}' <nl Opt> 
                    Return New Hasta(.Item(2).Data, .Item(5).Data)

                Case ProductionIndex.Mientrasstmt_Mientras_Lparen_Rparen_Lbrace_Rbrace
                    ' <Mientras Stmt> ::= MIENTRAS '(' <Expression> ')' '{' <Instructions> '}' <nl Opt> 
                    Return New Mientras(.Item(2).Data, .Item(5).Data)

                Case ProductionIndex.Selectvalue_Num
                    ' <Select Value> ::= NUM 
                    Return CType(.Item(0).Data, Integer)

                Case ProductionIndex.Selectvalue_Float
                    ' <Select Value> ::= FLOAT 
                    Return CType(.Item(0).Data, Decimal)

                Case ProductionIndex.Selectvalue_Str
                    ' <Select Value> ::= STR 
                    Return CType(.Item(0).Data, String).Replace("""", "")

                Case ProductionIndex.Expression_Gt
                    ' <Expression> ::= <Expression> '>' <Or Exp> 
                    Return New LogicNode(.Item(0).Data, .Item(2).Data, ">")

                Case ProductionIndex.Expression_Lt
                    ' <Expression> ::= <Expression> '<' <Or Exp> 
                    Return New LogicNode(.Item(0).Data, .Item(2).Data, "<")

                Case ProductionIndex.Expression_Lteq
                    ' <Expression> ::= <Expression> '<=' <Or Exp> 
                    Return New LogicNode(.Item(0).Data, .Item(2).Data, "<=")

                Case ProductionIndex.Expression_Gteq
                    ' <Expression> ::= <Expression> '>=' <Or Exp> 
                    Return New LogicNode(.Item(0).Data, .Item(2).Data, ">=")

                Case ProductionIndex.Expression_Eqeq
                    ' <Expression> ::= <Expression> '==' <Or Exp> 
                    Return New LogicNode(.Item(0).Data, .Item(2).Data, "==")

                Case ProductionIndex.Expression_Exclameq
                    ' <Expression> ::= <Expression> '!=' <Or Exp> 
                    Return New LogicNode(.Item(0).Data, .Item(2).Data, "!=")

                Case ProductionIndex.Expression_Tilde
                    ' <Expression> ::= <Expression> '~' <Or Exp> 
                    Return New LogicNode(.Item(0).Data, .Item(2).Data, "~")

                Case ProductionIndex.Expression
                    ' <Expression> ::= <Or Exp> 
                    Return .Item(0).Data

                Case ProductionIndex.Orexp_Pipepipe
                    ' <Or Exp> ::= <Or Exp> '||' <Xor Exp> 
                    Return New LogicNode(.Item(0).Data, .Item(2).Data, "||")

                Case ProductionIndex.Orexp
                    ' <Or Exp> ::= <Xor Exp> 
                    Return .Item(0).Data

                Case ProductionIndex.Xorexp_Exclamamp
                    ' <Xor Exp> ::= <Xor Exp> '!&' <And Exp> 
                    Return New LogicNode(.Item(0).Data, .Item(2).Data, "!&")

                Case ProductionIndex.Xorexp
                    ' <Xor Exp> ::= <And Exp> 
                    Return .Item(0).Data

                Case ProductionIndex.Andexp_Ampamp
                    ' <And Exp> ::= <And Exp> '&&' <Not Exp> 
                    Return New LogicNode(.Item(0).Data, .Item(2).Data, "&&")

                Case ProductionIndex.Andexp
                    ' <And Exp> ::= <Not Exp> 
                    Return .Item(0).Data

                Case ProductionIndex.Notexp_Exclam
                    ' <Not Exp> ::= '!' <Add Exp> 
                    Return New LogicNode(.Item(1).Data, Nothing, "!")
                Case ProductionIndex.Notexp
                    ' <Not Exp> ::= <Add Exp> 
                    Return .Item(0).Data

                Case ProductionIndex.Addexp_Plus
                    ' <Add Exp> ::= <Add Exp> '+' <Mult Exp> 
                    Return New ArithNode(.Item(0).Data, .Item(2).Data, "+")

                Case ProductionIndex.Addexp_Minus
                    ' <Add Exp> ::= <Add Exp> '-' <Mult Exp> 
                    Return New ArithNode(.Item(0).Data, .Item(2).Data, "-")

                Case ProductionIndex.Addexp
                    ' <Add Exp> ::= <Mult Exp> 
                    Return .Item(0).Data

                Case ProductionIndex.Multexp_Times
                    ' <Mult Exp> ::= <Mult Exp> '*' <Pow Exp> 
                    Return New ArithNode(.Item(0).Data, .Item(2).Data, "*")

                Case ProductionIndex.Multexp_Div
                    ' <Mult Exp> ::= <Mult Exp> '/' <Pow Exp> 
                    Return New ArithNode(.Item(0).Data, .Item(2).Data, "/")

                Case ProductionIndex.Multexp_Percent
                    ' <Mult Exp> ::= <Mult Exp> '%' <Pow Exp> 
                    Return New ArithNode(.Item(0).Data, .Item(2).Data, "%")

                Case ProductionIndex.Multexp
                    ' <Mult Exp> ::= <Pow Exp> 
                    Return .Item(0).Data

                Case ProductionIndex.Powexp_Caret
                    ' <Pow Exp> ::= <Pow Exp> '^' <Negate Exp> 
                    Return New ArithNode(.Item(0).Data, .Item(2).Data, "^")

                Case ProductionIndex.Powexp
                    ' <Pow Exp> ::= <Negate Exp> 
                    Return .Item(0).Data

                Case ProductionIndex.Negateexp_Minus
                    ' <Negate Exp> ::= '-' <Value> 
                    Return New ArithNode(.Item(1).Data, Nothing, "-")

                Case ProductionIndex.Negateexp
                    ' <Negate Exp> ::= <Value> 
                    Return .Item(0).Data

                Case ProductionIndex.Value_Id_Lparen_Rparen
                    ' <Value> ::= ID '(' <Param List> ')' 
                    Return New MethodCall(CStr(.Item(0).Data), .Item(2).Data)

                Case ProductionIndex.Value_Id
                    ' <Value> ::= ID 
                    Return New VarCall(.Item(0).Data)

                Case ProductionIndex.Value_Lparen_Rparen
                    ' <Value> ::= '(' <Expression> ')' 
                    Return .Item(1).Data

                Case ProductionIndex.Value_Num
                    ' <Value> ::= NUM 
                    Return New ValueNode(CType(.Item(0).Data, Integer))

                Case ProductionIndex.Value_Float
                    ' <Value> ::= FLOAT 
                    Return New ValueNode(CType(.Item(0).Data, Decimal))

                Case ProductionIndex.Value_Str
                    ' <Value> ::= STR 
                    Return New ValueNode(CType(.Item(0).Data, String).Replace("""", ""))

                Case ProductionIndex.Value_True
                    ' <Value> ::= TRUE 
                    Return New ValueNode(True)

                Case ProductionIndex.Value_False
                    ' <Value> ::= FALSE 
                    Return New ValueNode(False)

                Case ProductionIndex.Paramlist_Comma
                    ' <Param List> ::= <Expression> ',' <nl Opt> <Param List> 
                    Dim s = CType(.Item(3).Data, Stack(Of Node))
                    s.Push(.Item(0).Data)
                    Return s

                Case ProductionIndex.Paramlist
                    ' <Param List> ::= <Expression> 
                    Dim s = New Stack(Of Node)
                    s.Push(.Item(0).Data)
                    Return s

                Case ProductionIndex.Paramlist2
                    ' <Param List> ::=  
                    Return New Stack(Of Node)

            End Select
        End With     

        Return Result
    End Function
End Module
